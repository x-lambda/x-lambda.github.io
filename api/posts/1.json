{"total":1,"pageSize":10,"pageCount":1,"data":[{"title":"Envoy Redis 源码分析 第0章","slug":"Envoy-Redis-0","date":"2021-03-08T10:03:25.367Z","updated":"2021-03-09T07:28:51.518Z","comments":true,"path":"api/articles/Envoy-Redis-0.json","excerpt":"","keywords":null,"cover":"./images/envoy_0_1.png","content":"<h3 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h3><p>在遍地微服务的今天，<code>Service Mesh</code>蓄势待发，伺机一统江湖。恰好部门<code>Service Mesh</code>架构就是基于<code>Envoy</code>搭建的，并且高度依赖<code>Envoy</code>。而在过去的几个月，由于业务需要，正好有时间阅读了<code>redis proxy</code>相关的代码，同时发现当前网络上，关于这块的源码讲解甚少。因此决定写几篇文章，弥补此处的空白。</p>\n<h5 id=\"关于envoy\"><a href=\"#关于envoy\" class=\"headerlink\" title=\"关于envoy\"></a>关于<code>envoy</code></h5><p>关于<code>Envoy</code>是什么，这里基于个人理解，给个笼统的解释：就是一个超级代理，只是这个代理集成了服务发现，限流，熔断等牛逼哄哄的功能。</p>\n<p>如果以上定义还是过于复杂，更简单的解释：代理。</p>\n<p>既然是代理，那么必然要区分代理功能，常见的协议，<code>Envoy</code>都支持，例如<code>HTTP</code> ，<code>TCP</code>，<code>GRPC</code>协议。当然<code>Envoy</code>功能更强大，像<code>Redis</code>，<code>MySQL</code>(这两个本质也是<code>TCP</code>代理)等协议也支持。如果以上这些功能还不够，<code>Envoy</code>还可以扩展，自定义协议。</p>\n<p>本系列文章主要讲<code>envoy-redis</code>模块源码，至于为什么要选<code>envoy</code>，<code>envoy</code>怎么使用等等，不在本文的叙述范围，后续也不会再提。</p>\n<p>在正式开始阅读此系列文章之前，我希望您首先有以下基础：</p>\n<ul>\n<li>对<code>redis</code>有一定的认知和使用经验，尤其是协议模块</li>\n<li>对<code>envoy</code>有基础的知识，可以在<code>Mac/Linux</code>成功构建二进制文件，并且配置<code>redis</code>后端成功运行</li>\n<li>对<code>libevent</code>有一定的了解，还有系统调用<code>select/epoll</code>等</li>\n<li>对<code>c++</code>语法有初步的了解</li>\n</ul>\n<h5 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h5><p>开始分析源码之前，我们还需要了解一下<code>Envoy</code>使用场景。在<code>Service Mesh</code>出现之前，服务端常见的架构，如下图</p>\n<p><img src=\"./images/envoy_0_1.png\" alt=\"传统后端服务架构\"></p>\n<p>我们的服务依赖2个服务，账号服务和支付服务。通常都是对应的部门/业务方提供<code>HTTP/GRPC</code>接口供我们调用。以<code>HTTP</code>接口为例(最常见方式)，我们的服务会直接调用<code>account.xx.co</code>开头的域名，然后<code>slb</code>帮我们找到对应的实例，把数据转发过去。同理，当调用支付接口时，会发起一次<code>url: pay.xx.co</code>的<code>HTTP</code>调用。这其中完整的链路会涉及到<code>DNS</code>解析，<code>slb</code>动态加载等。</p>\n<p>如果我们的服务使用了<code>redis</code>，那么通常我们的机器还是配置一个本地代理，例如<code>twemproxy</code>。</p>\n<p>当<code>Service Mesh</code>出现后，服务的部署情况发生了变化，见下图</p>\n<p><img src=\"./images/envoy_0_3.png\" alt=\"Service Mesh\"></p>\n<p>可以看见这个叫<code>sidecar</code>的东西代替了<code>SLB</code>和<code>redis-proxy(twemproxy)</code>的功能。实际中这个<code>sidecar</code>叫伴生容器，配合<code>k8s</code>可以方便的部署服务。这个<code>sidecar</code>上就运行着<code>Envoy</code>二进制文件。只需要配置一下，就可以代理我们的账号和支付以及<code>redis</code>服务。</p>\n<p>当然真实生产环境中，业务的依赖会很多，很复杂，于是<code>Service Mesh</code>部署起来就会变成如下场景</p>\n<p><img src=\"./images/envoy_0_4.png\" alt=\"Service Mesh网格\"></p>\n<h5 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h5><p>参考图中的服务依赖，我们知道<code>envoy</code>需要作为3个代理同时运行，且看<code>HTTP</code>代理配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">static_resources:</span> </span><br><span class=\"line\"><span class=\"attr\">listeners:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;http_listener&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">address:</span> </span><br><span class=\"line\">    <span class=\"attr\">socket_address:</span> </span><br><span class=\"line\">      <span class=\"attr\">address:</span> <span class=\"string\">&quot;127.0.0.1&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">port_value:</span> <span class=\"number\">20000</span></span><br><span class=\"line\">  <span class=\"attr\">filter_chains:</span></span><br><span class=\"line\">      <span class=\"attr\">filters:</span> </span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;envoy.http_connection_manager&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">config:</span></span><br><span class=\"line\">            <span class=\"comment\"># ...</span></span><br><span class=\"line\">            <span class=\"attr\">cluster:</span> <span class=\"string\">&quot;service_account&quot;</span></span><br><span class=\"line\"><span class=\"attr\">clusters:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;service_account&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">socket_address:</span> </span><br><span class=\"line\">        <span class=\"attr\">address:</span> <span class=\"string\">&quot;10.20.30.40&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">port_value:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">socket_address:</span> </span><br><span class=\"line\">        <span class=\"attr\">address:</span> <span class=\"string\">&quot;10.20.30.41&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">port_value:</span> <span class=\"number\">8080</span></span><br></pre></td></tr></table></figure>\n\n<p><code>envoy</code>的配置可以十分复杂，但是为了后续源码理解，所有相关配置都会选择静态的，且最直观，最简洁。从上面的<code>HTTP</code>代理配置，我们可以看出账号服务部署在2个实例上(生产环境可以有成千上百)，然后通过本地<code>20000</code>端口调用接口。这样原来我们的代码调用接口时，通过域名发起一个<code>HTTP</code>调用，类似</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST http://account.xx.co/v0/api/abc -d &#x27;&#123;...&#125;&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>而现在经过<code>envoy</code>代理之后，我们代码调用则变成</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST http://127.0.0.1:20000/v0/api/abc -d &#x27;&#123;...&#125;&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>同样支付服务的代理配置大概你也能猜出来了，几乎可以完全照抄，只要变动一下服务的名称即可。</p>\n<p>你可能会疑惑这样的好处是啥，但是这不是本文要解决的问题，所以如果想要知道答案请自己去寻找。本文只谈<code>envoy</code>源码相关内容，在此之前，我们先了解<code>envoy</code>的使用方式。</p>\n<p>同样代理<code>redis</code>时也需要一份类似的配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">node:</span></span><br><span class=\"line\">  <span class=\"attr\">cluster:</span> <span class=\"string\">hello-service</span></span><br><span class=\"line\">  <span class=\"attr\">id:</span> <span class=\"string\">node1</span></span><br><span class=\"line\"><span class=\"attr\">static_resources:</span></span><br><span class=\"line\">  <span class=\"attr\">listeners:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">address:</span></span><br><span class=\"line\">        <span class=\"attr\">socket_address:</span></span><br><span class=\"line\">          <span class=\"attr\">address:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">          <span class=\"attr\">port_value:</span> <span class=\"number\">8000</span></span><br><span class=\"line\">      <span class=\"attr\">filter_chains:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">filters:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">envoy.filters.network.redis_proxy</span>  <span class=\"comment\"># well_known_names.h 中定义</span></span><br><span class=\"line\">              <span class=\"attr\">typed_config:</span></span><br><span class=\"line\">                <span class=\"string\">&quot;@type&quot;</span><span class=\"string\">:</span> <span class=\"string\">type.googleapis.com/envoy.config.filter.network.redis_proxy.v2.RedisProxy</span> <span class=\"comment\"># pb 中定义</span></span><br><span class=\"line\">                <span class=\"attr\">stat_prefix:</span> <span class=\"string\">redis-stat</span></span><br><span class=\"line\">                <span class=\"attr\">settings:</span></span><br><span class=\"line\">                  <span class=\"attr\">op_timeout:</span> <span class=\"string\">3s</span></span><br><span class=\"line\">                  <span class=\"attr\">enable_redirection:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">                  <span class=\"attr\">max_buffer_size_before_flush:</span> <span class=\"number\">100000</span></span><br><span class=\"line\">                  <span class=\"comment\"># enable_hashtagging: true</span></span><br><span class=\"line\">                  <span class=\"comment\"># buffer_flush_timeout</span></span><br><span class=\"line\">                  <span class=\"comment\"># max_upstream_unknown_connections</span></span><br><span class=\"line\">                <span class=\"attr\">prefix_routes:</span></span><br><span class=\"line\">                  <span class=\"attr\">routes:</span></span><br><span class=\"line\">                    <span class=\"bullet\">-</span> <span class=\"attr\">prefix:</span> <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">                      <span class=\"attr\">cluster:</span> <span class=\"string\">redis</span></span><br><span class=\"line\">                    <span class=\"bullet\">-</span> <span class=\"attr\">prefix:</span> <span class=\"string\">&quot;b&quot;</span></span><br><span class=\"line\">                      <span class=\"attr\">cluster:</span> <span class=\"string\">redis_1</span></span><br><span class=\"line\">  <span class=\"attr\">clusters:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">redis</span></span><br><span class=\"line\">      <span class=\"attr\">connect_timeout:</span> <span class=\"number\">0.</span><span class=\"string\">25s</span></span><br><span class=\"line\">      <span class=\"attr\">type:</span> <span class=\"string\">strict_dns</span></span><br><span class=\"line\">      <span class=\"attr\">lb_policy:</span> <span class=\"string\">round_robin</span></span><br><span class=\"line\">      <span class=\"comment\"># # 如果这里指定了 cluster_type 参数，表明背后一个 redis cluster</span></span><br><span class=\"line\">      <span class=\"comment\"># # 如果未指定，则背后的机器都是单redis实例，只是使用简单的负载均衡lb(hash)机制</span></span><br><span class=\"line\">      <span class=\"comment\"># cluster_type:</span></span><br><span class=\"line\">      <span class=\"comment\">#     name: envoy.clusters.redis</span></span><br><span class=\"line\">      <span class=\"comment\">#     typed_config:</span></span><br><span class=\"line\">      <span class=\"comment\">#         &quot;@type&quot;: type.googleapis.com/google.protobuf.Struct</span></span><br><span class=\"line\">      <span class=\"comment\">#         value:</span></span><br><span class=\"line\">      <span class=\"comment\">#             cluster_refresh_rate: 5s</span></span><br><span class=\"line\">      <span class=\"comment\">#             cluster_refresh_timeout: 3s</span></span><br><span class=\"line\">      <span class=\"attr\">hosts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">socket_address:</span></span><br><span class=\"line\">            <span class=\"attr\">address:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">            <span class=\"attr\">port_value:</span> <span class=\"number\">12300</span></span><br><span class=\"line\">      <span class=\"attr\">health_checks:</span></span><br><span class=\"line\">        <span class=\"attr\">timeout:</span> <span class=\"string\">1s</span></span><br><span class=\"line\">        <span class=\"attr\">interval:</span> <span class=\"string\">10s</span></span><br><span class=\"line\">        <span class=\"attr\">unhealthy_threshold:</span> <span class=\"number\">9</span></span><br><span class=\"line\">        <span class=\"attr\">healthy_threshold:</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"attr\">custom_health_check:</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">envoy.health_checkers.redis</span></span><br><span class=\"line\">          <span class=\"attr\">typed_config:</span></span><br><span class=\"line\">            <span class=\"string\">&quot;@type&quot;</span><span class=\"string\">:</span> <span class=\"string\">type.googleapis.com/envoy.config.health_checker.redis.v2.Redis</span></span><br><span class=\"line\">            <span class=\"attr\">key:</span> <span class=\"string\">foo</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">redis_1</span></span><br><span class=\"line\">      <span class=\"attr\">connect_timeout:</span> <span class=\"number\">0.</span><span class=\"string\">25s</span></span><br><span class=\"line\">      <span class=\"attr\">type:</span> <span class=\"string\">strict_dns</span></span><br><span class=\"line\">      <span class=\"attr\">lb_policy:</span> <span class=\"string\">round_robin</span></span><br><span class=\"line\">      <span class=\"attr\">hosts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">socket_address:</span></span><br><span class=\"line\">            <span class=\"attr\">address:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">            <span class=\"attr\">port_value:</span> <span class=\"number\">12200</span></span><br><span class=\"line\">      <span class=\"attr\">health_checks:</span></span><br><span class=\"line\">        <span class=\"attr\">timeout:</span> <span class=\"string\">1s</span></span><br><span class=\"line\">        <span class=\"attr\">interval:</span> <span class=\"string\">10s</span></span><br><span class=\"line\">        <span class=\"attr\">unhealthy_threshold:</span> <span class=\"number\">9</span></span><br><span class=\"line\">        <span class=\"attr\">healthy_threshold:</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"attr\">custom_health_check:</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">envoy.health_checkers.redis</span></span><br><span class=\"line\">          <span class=\"attr\">typed_config:</span></span><br><span class=\"line\">            <span class=\"string\">&quot;@type&quot;</span><span class=\"string\">:</span> <span class=\"string\">type.googleapis.com/envoy.config.health_checker.redis.v2.Redis</span></span><br><span class=\"line\">            <span class=\"attr\">key:</span> <span class=\"string\">foo</span></span><br></pre></td></tr></table></figure>\n\n<p>这份配置相对上面的<code>HTTP</code>配置可能变复杂了，不过也不难理解，我们部署了2个<code>redis</code>集群，以字符<code>a</code>开头的相关请求会发送到第一个集群<code>redis</code>(这个只是集群的名字，随爱好而定)，以字符<code>b</code>开头的请求会发送到第二个集群<code>redis_1</code>。</p>\n<p>然后我们启动<code>envoy</code>，再通过</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> redis-cli -h 127.0.0.1 -p 8000</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> <span class=\"built_in\">set</span> a 123</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> get a</span> </span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> ...</span></span><br></pre></td></tr></table></figure>\n\n<p>即可正常使用<code>redis</code>缓存。</p>\n<p>这圈配置看下来，你会发现使用envoy也不是很难。事实也是如此，下一篇文章我会讲解<code>envoy</code>开发环境的搭建，同时运行<code>redis</code>代理。</p>\n","text":"序在遍地微服务的今天，Service Mesh蓄势待发，伺机一统江湖。恰好部门Service Mesh架构就是基于Envoy搭建的，并且高度依赖Envoy。而在过去的几个月，由于业务需要，正好有时间阅读了redis proxy相关的代码，同时发现当前网络上，关于这块的源码讲解甚少","link":"","raw":null,"photos":[],"categories":[],"tags":[]}]}